updated with code

### Practical 1: Displaying Different LED Patterns
Connections:
- Raspberry Pi Pin 1 (3.3V): Connect to the anode (+) of the LED through a 220 Ω resistor.
- GPIO Pins: Connect different GPIO pins to control multiple LEDs (e.g., GPIO Pin 17, 27, 22).
- Ground Pins (Pin 6, 9, 14, etc.): Connect to the cathode (-) of the LED.

Terminal Code:
- No specific terminal commands are required here.

Python Code:
python
import RPi.GPIO as GPIO
import time

# Setup GPIO
GPIO.setmode(GPIO.BCM)
GPIO.setwarnings(False)

# Define LED pins
leds = [17, 27, 22]
for led in leds:
    GPIO.setup(led, GPIO.OUT)

# Blink LEDs
for i in range(5):
    for led in leds:
        GPIO.output(led, GPIO.HIGH)
        time.sleep(0.5)
        GPIO.output(led, GPIO.LOW)
        time.sleep(0.5)

GPIO.cleanup()


---

### Practical 2: Displaying Time over a 4-Digit 7-Segment Display
Connections:
- tm1637 Display Pinout:
   - VCC (Power): Connect to Pin 2 (5V).
   - GND: Connect to Pin 6 (Ground).
   - CLK (Clock): Connect to GPIO Pin 23.
   - DIO (Data In/Out): Connect to GPIO Pin 24.

Terminal Code:
- No specific terminal commands beyond running the Python code.

Python Code:
python
import sys
import time
import datetime
import RPi.GPIO as GPIO
import tm1637

# Setup Display
Display = tm1637.TM1637(23, 24, tm1637.BRIGHT_TYPICAL)
Display.Clear()
Display.SetBrightness(1)

while True:
    now = datetime.datetime.now()
    hour = now.hour
    minute = now.minute
    second = now.second
    current_time = [int(hour / 10), hour % 10, int(minute / 10), minute % 10]
    
    Display.Show(current_time)
    Display.ShowDoublepoint(second % 2)
    time.sleep(1)


---

### Practical 4: Raspberry Pi Based Oscilloscope
Connections:
- ADS1115 ADC Pinout:
   - VDD: Connect to Pin 1 (3.3V).
   - GND: Connect to Pin 6 (Ground).
   - SCL (Clock Line): Connect to GPIO Pin 3.
   - SDA (Data Line): Connect to GPIO Pin 2.

Terminal Code:
- No specific terminal commands beyond running the Python code.

Python Code:
python
import time
import matplotlib.pyplot as plt
import Adafruit_ADS1x15
from drawnow import *

# Setup ADC
adc = Adafruit_ADS1x15.ADS1115()
GAIN = 1
val = []
plt.ion()

# Start reading ADC values
adc.start_adc(0, gain=GAIN)
def makeFig():
    plt.ylim(-5000, 5000)
    plt.title('Oscilloscope')
    plt.grid(True)
    plt.ylabel('ADC Output')
    plt.plot(val, 'ro-', label='lux')
    plt.legend(loc='lower right')

while True:
    value = adc.get_last_result()
    print('Channel 0: {}'.format(value))
    val.append(int(value))
    drawnow(makeFig)
    plt.pause(0.00001)
    time.sleep(0.5)


---

### Practical 5: Controlling Raspberry Pi with Telegram Bot
Connections:
- LED: 
   - Connect the anode of the LED to GPIO Pin 11 through a 220 Ω resistor.
   - Connect the cathode to Ground (Pin 6).

Terminal Code:
1. Install Telepot Library:
   bash
   sudo pip install telepot
   

Python Code:
python
import telepot
import RPi.GPIO as GPIO
import time

# Setup GPIO
GPIO.setmode(GPIO.BOARD)
GPIO.setup(11, GPIO.OUT)

def handle(msg):
    chat_id = msg['chat']['id']
    command = msg['text']
    
    if command.lower() == 'on':
        GPIO.output(11, GPIO.HIGH)
        bot.sendMessage(chat_id, 'LED is On')
    elif command.lower() == 'off':
        GPIO.output(11, GPIO.LOW)
        bot.sendMessage(chat_id, 'LED is Off')

bot = telepot.Bot('YOUR_BOT_TOKEN')
bot.message_loop(handle)

while True:
    time.sleep(10)


---

### Practical 7: GPS Module Interfacing with Raspberry Pi
Connections:
- GPS Module Pinout:
   - VCC: Connect to Pin 2 (5V).
   - RX (Receive): Connect to GPIO Pin 10 (TX).
   - TX (Transmit): Connect to GPIO Pin 8 (RX).
   - GND: Connect to Pin 6 (Ground).

Terminal Code:
1. Install necessary libraries:
   bash
   sudo apt-get install python-serial
   

Python Code:
python
import serial
import pynmea2
import time

# Setup serial port for GPS
port = "/dev/ttyAMA0"
ser = serial.Serial(port, baudrate=9600, timeout=1)

while True:
    newdata = ser.readline()
    if newdata[0:6] == "$GPRMC":
        newmsg = pynmea2.parse(newdata)
        lat = newmsg.latitude
        lng = newmsg.longitude
        print("Latitude: {} and Longitude: {}".format(lat, lng))
    time.sleep(1)


---

### Practical 8: IoT Based Web-Controlled Home Automation
Connections:
- LED:
   - Anode to GPIO Pin 11 through a 220 Ω resistor.
   - Cathode to Ground (Pin 6).

Terminal Code:
1. Install WebIOPi:
   bash
   sudo apt-get update
   sudo apt-get upgrade
   sudo reboot
   cd ~
   wget http://sourceforge.net/projects/webiopi/files/WebIOPi-0.7.1.tar.gz
   tar xvzf WebIOPi-0.7.1.tar.gz
   cd WebIOPi-0.7.1/
   wget https://raw.githubusercontent.com/doublebind/raspi/master/webiopi-pi2bplus.patch
   patch -p1 -i webiopi-pi2bplus.patch
   sudo chmod 775 setup.sh
   sudo ./setup.sh
   sudo reboot
   

2. Start and stop WebIOPi:
   bash
   sudo webiopi -d -c /etc/webiopi/config
   sudo /etc/init.d/webiopi start
   sudo /etc/init.d/webiopi stop
   

Python Code:
- WebIOPi doesn’t need a separate Python script since you control the GPIO pins via a web interface.

---

### Practical 9: Visitor Monitoring with Raspberry Pi & Pi Camera
Connections:
- Pi Camera Module:
   - Open the camera notch on the Raspberry Pi and insert the camera module.
   - Secure the notch to ensure the camera module is connected.

Terminal Code:
1. Enable the Pi Camera:
   bash
   sudo raspi-config
   

Python Code:
python
from picamera import PiCamera
from time import sleep

# Setup camera
camera = PiCamera()
camera.resolution = (1280, 780)

camera.start_preview()
camera.start_recording('/home/pi/Desktop/video.h264')

# Capture images
for i in range(5):
    sleep(5)
    camera.capture('/home/pi/Desktop/image%s.jpg' % i)

camera.stop_recording()
camera.stop_preview()


---

### Practical 10: Interfacing Raspberry Pi with RFID
Connections:
- RFID RC522 Pinout:
   - SDA: Connect to Pin 24.
   - SCK: Connect to Pin 23.
   - MOSI: Connect to Pin 19.
   - MISO: Connect to Pin 21.
   - GND: Connect to Pin 6 (Ground).
   - RST: Connect to Pin 22.
   - 3.3V: Connect to Pin 1 (3.3V).

Terminal Code:
1. Install necessary libraries:
   bash
   sudo pip install mfrc522
   

Python Code:
python
import RPi.GPIO as GPIO
from mfrc522 import SimpleMFRC522

# Setup RFID reader
rfid = SimpleMFRC522()

try:
    print("Hold tag near the reader...")
    rfid.write("Prof. Gufran")
    print("Written!")
finally:
    GPIO.cleanup()